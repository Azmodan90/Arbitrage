2025-02-24 18:48:53,798 - INFO - Starting arbitrage program
2025-02-24 18:58:31,632 - ERROR - Task was destroyed but it is pending!
task: <Task cancelling name='Task-1' coro=<main() done, defined at /workspaces/Arbitrage/main.py:67> wait_for=<_GatheringFuture pending cb=[Task.task_wakeup()]> cb=[gather.<locals>._done_callback() at /usr/local/lib/python3.11/asyncio/tasks.py:764]>
2025-02-24 18:58:31,635 - WARNING - bitstamp requires to release all resources with an explicit call to the .close() coroutine. If you are using the exchange instance with async coroutines, add `await exchange.close()` to your code into a place when you're done with the exchange and don't need the exchange instance anymore (at the end of your async coroutine).
2025-02-24 18:58:31,636 - ERROR - Task was destroyed but it is pending!
task: <Task cancelling name='Task-4' coro=<PairArbitrageStrategy.run() running at /workspaces/Arbitrage/arbitrage.py:258> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[gather.<locals>._done_callback() at /usr/local/lib/python3.11/asyncio/tasks.py:764, gather.<locals>._done_callback() at /usr/local/lib/python3.11/asyncio/tasks.py:764]>
2025-02-24 18:58:31,637 - ERROR - Task was destroyed but it is pending!
task: <Task cancelling name='Task-5' coro=<PairArbitrageStrategy.run() running at /workspaces/Arbitrage/arbitrage.py:258> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[gather.<locals>._done_callback() at /usr/local/lib/python3.11/asyncio/tasks.py:764, gather.<locals>._done_callback() at /usr/local/lib/python3.11/asyncio/tasks.py:764]>
2025-02-24 18:58:31,638 - ERROR - Task was destroyed but it is pending!
task: <Task cancelling name='Task-7' coro=<PairArbitrageStrategy.run() running at /workspaces/Arbitrage/arbitrage.py:258> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[gather.<locals>._done_callback() at /usr/local/lib/python3.11/asyncio/tasks.py:764, gather.<locals>._done_callback() at /usr/local/lib/python3.11/asyncio/tasks.py:764]>
2025-02-24 18:58:31,638 - WARNING - binance requires to release all resources with an explicit call to the .close() coroutine. If you are using the exchange instance with async coroutines, add `await exchange.close()` to your code into a place when you're done with the exchange and don't need the exchange instance anymore (at the end of your async coroutine).
2025-02-24 18:58:31,643 - ERROR - Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7fb15e86e150>
2025-02-24 18:58:31,644 - ERROR - Unclosed connector
connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x7fb15e880670>, 79146.124541734)]']
connector: <aiohttp.connector.TCPConnector object at 0x7fb15e86dd50>
2025-02-24 18:58:31,675 - WARNING - kucoin requires to release all resources with an explicit call to the .close() coroutine. If you are using the exchange instance with async coroutines, add `await exchange.close()` to your code into a place when you're done with the exchange and don't need the exchange instance anymore (at the end of your async coroutine).
2025-02-24 18:58:31,678 - ERROR - Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7fb16cf59bd0>
2025-02-24 18:58:31,686 - WARNING - bitget requires to release all resources with an explicit call to the .close() coroutine. If you are using the exchange instance with async coroutines, add `await exchange.close()` to your code into a place when you're done with the exchange and don't need the exchange instance anymore (at the end of your async coroutine).
2025-02-24 18:58:31,689 - ERROR - Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7fb15e86ca90>
2025-02-24 18:58:31,697 - ERROR - Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7fb157958790>
2025-02-24 18:58:31,698 - ERROR - Unclosed connector
connections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x7fb1543649f0>, 79147.875357853)]']
connector: <aiohttp.connector.TCPConnector object at 0x7fb157f02c50>
